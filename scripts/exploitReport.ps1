####
#
# Description: Script used to pull extract a listing of vulnerabilities with an exploit, regardlesss of severity, from Tenable.io 
#                and send to an email address
#
#               Step One: Generate a high level CSV report of vulnerabilities that have a known exploit, email report
#               Step Two: Create second report, Excel, with 7 columns for support teams to use for resolution, email report
#
# Use at your own risk. Script is not supported by Tenable.
#
# Requirement: You must have tenable_io.xml on your system as this script will pull your Access Key and Secret Key from that file.
#              Place the file in a location that is secure yet this script has the ability read.
#
# Version: .1 Initial Script November 7, 2018
#           Initial file layout
#
####

# Import required module(s)
Import-Module PSExcel

# Import configuration settings
[xml]$ConfigFile = Get-Content /Users/bcook/Desktop/Powershell/tenable_io.xml
$Tenableio = $ConfigFile.Settings.Access.Url
$access = $ConfigFile.Settings.Access.AccessKey
$secret = $ConfigFile.Settings.Access.SecretKey
$smtpserver = $ConfigFile.Settings.SMTP.SMPTServer
$smtpport = $ConfigFile.Settings.SMTP.SMTPPort
$from = $ConfigFile.Settings.SMTP.From
$to = $ConfigFile.Settings.SMTP.To
$smtpaccount = $ConfigFile.Settings.SMTP.SMTPAccount
$smtppassword = $($ConfigFile.Settings.SMTP.SMTPPassword | ConvertTo-SecureString -AsPlainText -Force)
$credentials = New-Object System.Management.Automation.Pscredential ($smtpaccount, $smtppassword)
$subject = "Exploit Vulnerability's  Report"
$body = "Vulnerability Report."
$tempfile = "/Users/bcook/Desktop/Powershell/test.csv"
$exploitReport = "/Users/bcook/Desktop/Powershell/exploit.csv"
$outfile = "/Users/bcook/Desktop/Powershell/vulnReport.xlsx"

# Header
$headers = "accessKey=$access; secretKey=$secret"

function reportExploit ($tempfile) {
  $object = "workbenches/vulnerabilities?authenticated=false&exploitable=true&resolvable=false"
  $response = Invoke-RestMethod -Method Get -Uri $Tenableio/$object -Header @{ "X-ApiKeys" = $headers }
  $response.vulnerabilities | select plugin_id, plugin_name, vulnerability_state, count, accepted_count, recasted_count | export-csv $tempfile -noType
}

# Request a report to be generated
function listSystems($reportFormat, $reportValue, $Reportchapter, $pluginID) {
  $object = "workbenches/export?format=$reportFormat&report=$reportValue&chapter=$reportChapter&plugin_id=$pluginID"
  $response = Invoke-RestMethod -Method Get -Uri $Tenableio/$object -Header @{ "X-ApiKeys" = $headers }
  Write-Host $response[0].outputs
  return $response[0].file
}

# Request a report to be generated
function Download-Report($inFile, $tempfile, $outfile, $element) {
  # Query Tenable.io to see if the requested file for status. 
  DO {
    $object = "workbenches/export/$inFile/status"
    $response = Invoke-RestMethod -Method Get -Uri $Tenableio/$object -Header @{ "X-ApiKeys" = $headers }
    Write-Host $response[0].status
  }

  Until ($response[0].status -eq "ready")
  # Once the file is ready, pull down and save to the local system.
  $object = "workbenches/export/$inFile/download"
  Write-Host $object
  $response = Invoke-RestMethod -Method Get -Uri $Tenableio/$object -Header @{ "X-ApiKeys" = $headers } -OutFile $tempfile
  Import-Csv $tempfile | select Risk, FQDN, NetBios, Host, Name, Solution, "Plugin Output" | Export-XLSX -path $outfile -WorksheetName $element -Table
  Remove-Item $tempfile
}

## Main report
# Crete report containing vulnerabilities with an exploit regardless of severity and email report.
reportExploit $exploitReport
Send-MailMessage -From $from -to $to -Subject $subject -Body $body -SmtpServer $smtpserver -port $smtpport -Usessl -Credential $credentials -Attachments $exploitReport

# Read the exploit report into an array
$test = Import-Csv $exploitReport

# Loop through the plugin ID's to create Excel workbook with a tab labeled for each plugin ID found.
foreach($item in $test) {                                                                                                               
  $export = listSystems csv vulnerabilities vuln_by_asset $item.plugin_id
  Download-Report $export $tempfile $outfile $item.plugin_id
}                                                                                                                                                                        

# Email report out.
Send-MailMessage -From $from -to $to -Subject $subject -Body $body -SmtpServer $smtpserver -port $smtpport -Usessl -Credential $credentials -Attachments $outfile
